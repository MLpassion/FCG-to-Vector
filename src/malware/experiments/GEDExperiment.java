package malware.experiments;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Random;

import malware.feature.MinHashMatcher;
import malware.parse.CallGraph;
import ml.random.GraphState;
import ml.random.SimulatedAnnealing;
import ml.random.State;
import util.GMLLongArrayFeatureReaderWriter;

/***
 * Graph Edit distance experiments.
 * 
 * @author meha
 *
 */
public class GEDExperiment {
  public static void main(String[] args) throws FileNotFoundException {
    CallGraph<long[]> graph1 = util.GMLGraphReader.read(new BufferedInputStream(
        new FileInputStream("/home/meha/Tmp/output/CallGraph/MinHash_10/01azqd4InC7m9JpocGv5.gml")),
        new GMLLongArrayFeatureReaderWriter());
    CallGraph<long[]> graph2 = util.GMLGraphReader.read(new BufferedInputStream(
        new FileInputStream("/home/meha/Tmp/output/CallGraph/MinHash_10/01IsoiSMh5gxyDYTl4CB.gml")),
        new GMLLongArrayFeatureReaderWriter());

    Random rng = new Random();
    double beta = 4.0;
    double coolingRate = 0.2;
    int relaxationIteration = 60;
    int iter = 10;
    System.out.println("beta,coolingRate,relaxationIteration,iter,GED");
//    for (relaxationIteration = 10; relaxationIteration <= 60; relaxationIteration += 10) {
      for (iter = 10; iter <= 150; iter += 10) {
        double avgGED = 0.0;
        int max = 10;
        for (int i = 0; i < max; i++) {
          State initialState = GraphState.randomState(graph1, graph2, new MinHashMatcher(), rng);
          SimulatedAnnealing algo = new SimulatedAnnealing();
          State finalState =
              algo.search(initialState, beta, relaxationIteration, coolingRate, iter, rng);
          avgGED += finalState.getCost();
        }
        System.out.printf("%.2f,%.2f,%d,%d,%.3f\n", beta, coolingRate, relaxationIteration, iter,
            avgGED/max);
      }
//    }
  }
}
