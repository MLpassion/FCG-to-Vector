package malware.experiments;

import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

import util.CommandLineArguments;
import util.FileUtil;
import util.Pair;

public class ByteNgramFreq {
  public static class NgramByte {
    byte[] ngram;
    Integer hCode;
    String ngramStr = null;

    public NgramByte(Collection<Byte> byteNgram) {
      ngram = new byte[byteNgram.size()];
      int i = 0;
      for (byte b : byteNgram) {
        ngram[i++] = b;
      }
    }

    @Override
    public int hashCode() {
      if (hCode != null) {
        return hCode;
      }
      final int prime = 31;
      hCode = 1;
      hCode = prime * hCode + Arrays.hashCode(ngram);
      return hCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      NgramByte other = (NgramByte) obj;
      if (!Arrays.equals(ngram, other.ngram))
        return false;
      return true;
    }

    @Override
    public String toString() {
      if (ngramStr != null) {
        return ngramStr;
      }
      StringBuilder buff = new StringBuilder();
      for (byte b : ngram) {
        buff.append(String.format("%x", b));
        buff.append("-");
      }
      ngramStr = buff.toString();
      return ngramStr;
    }
  }

  public static void main(String[] args) throws IOException {
    CommandLineArguments cmdArgs = new CommandLineArguments();
    cmdArgs.addOption(true, "-in", true); // Input folder path .byte files
    cmdArgs.addOption(true, "-label", true); // Path to class label info.
    cmdArgs.addOption(true, "-out", true); // Output file pathfor result file
    cmdArgs.addOption(true, "-ngram", true); // The Ngram length
    cmdArgs.addOption(false, "-ext", true); // file extensions of the input files
    cmdArgs.addOption(false, "-max_files", true); // max number of files to process.

    if (!cmdArgs.parseCommandLineArgs(args)) {
      System.out.println("Usage:\n\tjava ByteNgramFreq "
          + " -in input_folder -label class_label_file -out output_file "
          + " -ngram ngram_length [-ext input_file_extensions(default=.bytes)]\n");
      return;
    }

    String inputPath = cmdArgs.getOptionValue("-in");
    String classLabelPath = cmdArgs.getOptionValue("-label");
    String outputPath = cmdArgs.getOptionValue("-out");
    int ngramLen = Integer.parseInt(cmdArgs.getOptionValue("-ngram"));
    String extension =
        cmdArgs.getOptionValue("-ext") == null ? ".bytes" : cmdArgs.getOptionValue("-ext");
    Integer maxFiles = cmdArgs.getOptionValue("-max_files") == null ? -1
        : Integer.parseInt(cmdArgs.getOptionValue("-max_files"));

    File inDir = new File(inputPath);
    File[] files = null;
    if (inDir.isDirectory()) {
      files = FileUtil.listFiles(extension, inDir);
    } else if (inDir.isFile()) {
      files = new File[1];
      files[0] = inDir;
    } else {
      System.err.printf("ERROR: Input file % does not exist.\n", inputPath);
      return;
    }
    
    File classLabelFile = new File(classLabelPath);
    if (!classLabelFile.exists()) {
      System.err.printf("ERROR: Class Label file % does not exist.\n", classLabelPath);
      return;
    }

    extractNgramByte(outputPath, maxFiles, files, ngramLen, classLabelFile, true);
  }

  /***
   * Extracts Byte Ngram feature.
   * @param outputPath the path output file.
   * @param maxFiles maximum number of files to be process.
   * @param files array of input files to extract feature for.
   * @param ngramLen length of the ngram.
   * @param classLabelFile class label file.
   * @param hasClassLabel is class label available.
   * @throws IOException
   */
  public static void extractNgramByte(String outputPath, Integer maxFiles, File[] files,
      int ngramLen, File classLabelFile, boolean hasClassLabel) throws IOException {
    Map<String, String> classLabelMap = null;
    if (hasClassLabel) {
      classLabelMap = malware.data.MicrosoftDatasetReaders.readClassLables(classLabelFile);
    } else {
      classLabelMap = new HashMap<String, String>();
    }
    Set<NgramByte> universalNgrams = new HashSet<>(1024);

    // for each file
    Pair<String, HashMap<NgramByte, Integer>>[] rawFreqArray =
        new Pair[maxFiles >= 0 ? maxFiles : files.length];
    for (int i = 0; i < files.length && (i < maxFiles || maxFiles < 0); i++) {
      if (i % 100 == 0) {
        System.out.printf("Processed %d of %d\n", i, maxFiles > -1 ? maxFiles : files.length);
      }
      HashMap<NgramByte, Integer> rawNgramFreq =
          countNgramFrequency(files[i], universalNgrams, ngramLen);
      String binaryName = files[i].getName().replaceFirst("[.][^.]+$", "");
      rawFreqArray[i] = new Pair<String, HashMap<NgramByte, Integer>>(binaryName, rawNgramFreq);
    }

    BufferedWriter writer = new BufferedWriter(new FileWriter(outputPath));
    // BufferedWriter out = new BufferedWriter(new FileWriter(outFile));

    // write arrf header
    writeHeader(writer);

    // write attribute
    writeAttributes(writer, universalNgrams, hasClassLabel);

    // write @Data
    writer.write("\n@DATA\n");
    for (int i = 0; i < rawFreqArray.length; i++) {
      writeFeatureVector(writer, rawFreqArray[i], universalNgrams, 
          classLabelMap.get(rawFreqArray[i].getFirst()));
    }
    writer.flush();
    writer.close();
  }

  private static HashMap<NgramByte, Integer> countNgramFrequency(File file,
      Set<NgramByte> universalNgrams, int ngramLen) throws IOException {
    BufferedInputStream stream = new BufferedInputStream(new FileInputStream(file));

    HashMap<NgramByte, Integer> map = new HashMap<NgramByte, Integer>();

    int b;
    Queue<Byte> q = new LinkedList<Byte>();
    while ((b = stream.read()) != -1) {
      q.add((byte) b);
      if (q.size() > ngramLen) {
        q.poll();
      }
      if (q.size() == ngramLen) {
        NgramByte ngram = new NgramByte(q);
        Integer count = map.get(ngram);
        if (count == null) {
          count = 0;
        }
        if (count == 0 && !universalNgrams.contains(ngram)) {
          universalNgrams.add(ngram);
        }
        map.put(ngram, count + 1);
      }
    }
    return map;
  }

  /***
   * Writes ARFF header.
   * @param writer output stream.
   * @throws IOException
   */
  private static void writeHeader(BufferedWriter writer) throws IOException {
    writer.write(String.format("@RELATION call_graph_features\n"));
  }

  /***
   * Writes ARFF attribute metadata.
   * @param writer output stream.
   * @param universalNgrams A set containing all obsereved ngrams.
   * @param hasClassLabel is class label available.
   * @throws IOException
   */
  private static void writeAttributes(BufferedWriter writer,
      Set<NgramByte> universalNgrams, boolean hasClassLabel) throws IOException {
    writer.write(String.format("@ATTRIBUTE ID STRING\n"));
    for (NgramByte ngram : universalNgrams) {
      writer.write(String.format("@ATTRIBUTE %s NUMERIC\n", ngram));
    }
    writer.write(String.format("@ATTRIBUTE class  {1,2,3,4,5,6,7,8,9}\n"));
  }

  /***
   * Writes the feature vector represeantation of the given data instance.
   * @param writer the output stream.
   * @param pair Pair object of <Instance_ID, NgramFreqMap>
   * @param universalNgrams A set containing all obsereved ngrams.
   * @param classLabel class label. If null, then class albel wil not be written.
   * @throws IOException
   */
  private static void writeFeatureVector(BufferedWriter writer,
      Pair<String, HashMap<NgramByte, Integer>> pair, Set<NgramByte> universalNgrams, 
      String classLabel)
          throws IOException {
    writer.write(pair.getFirst());
    HashMap<NgramByte, Integer> map = pair.getSecond();
    for (NgramByte ngram : universalNgrams) {
      Integer count = map.get(ngram);
      writer.write(",");
      if (count == null) {
        writer.write(Integer.toString(0));
      } else {
        writer.write(Integer.toString(count));
      }
    }

    if (classLabel != null) {
      writer.write(",");
      writer.write(classLabel);
    }
    writer.write("\n");
  }
}


