package malware.experiments;

import java.util.List;

import util.Pair;

public class SupervisedPerformanceMetric {

  /***
   * 
   * @param predictions a list containing orderd pairs of elements(actual, predicted). 
   * Each pair is a contains the actual and predicted class of an instance.
   * @return A printable String representation of the confusin matrix.
   */
  public static String confusionMatrix(List<Pair<String, String>> predictions) {
    int numClasses = 9;
    int[][] cMatrix = new int[numClasses][numClasses];
    for (int i = 0; i < cMatrix.length; i++) {
      cMatrix[i] = new int[numClasses];
    }
    for (Pair<String,String> p : predictions) {
      int actual = Integer.parseInt(p.getFirst());
      int predicted = Integer.parseInt(p.getSecond());
      cMatrix[actual-1][predicted-1]++;
    }
    
    StringBuilder buff = new StringBuilder();
    char count = 97;
    for (int i = 0; i < cMatrix.length; i++) {
      buff.append(String.format("%5c", count + i));
    }
    buff.append(String.format("  <--- classified as\n"));
    for (int i = 0; i < cMatrix.length; i++) {
      for (int j = 0; j < cMatrix[i].length; j++) {
        buff.append(String.format("%5d", cMatrix[i][j]));
      }
      buff.append(String.format(" |\t %c = %d\n", count + i, i+1));
    }
    return buff.toString();
  }

  /***
   * Computes the prediction accuracy.
   * @param predictions a list containing orderd pairs of elements. Each pair is a contains
   * the actual and predicted class of an instance.
   * @return the prediction accuracy.
   */
  public static double accuracy(List<Pair<String, String>> predictions) {
    double accuracy = 0;
    for (Pair<String,String> p : predictions) {
      if (p.getFirst().equals(p.getSecond())) {
        accuracy++;
      }
    }
    accuracy /= predictions.size();
    return accuracy;
  }

}
