package malware.parse;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import ml.association.HashTreeItemset;
import ml.association.Sequence;

public class Function {
  String name;
  Set<String> nameAlias;
  /***
   * The most frequent sequence with in the function.
   */
  List<Sequence> frequentSequences;
  List<String> calledFunctions;
  List<AsmParser.Instruction> instructions;
  List<HashTreeItemset> transactions;
  
  public Function() {
    this("");
  }
  
  public Function(String name) {
    super();
    this.name = name;
    nameAlias = null;
  }

  public String getName() {
    return name;
  }
  
  public void setName(String name) {
    this.name = name;
  }

  public void addNameAlias(String alias) {
    if (nameAlias == null) {
      nameAlias = new HashSet<>();
    }
    nameAlias.add(alias);
  }
  
  public boolean knownByName(String nameOrAlias) {
    if (name.equals(nameOrAlias)) {
      return true;
    } else if (nameAlias != null) {
      return nameAlias.contains(nameOrAlias);
    }
    return false;
  }
  
  public Iterable<String> getNameAlias() {
    if (nameAlias == null) {
      return Collections.emptySet();
    }
    return nameAlias;
  }

  public Iterable<Sequence> sequences() {
    if (frequentSequences == null) {
      return Collections.emptyList();
    }
    return frequentSequences;
  }
  
  public void addSquence(Sequence seq) {
    if (frequentSequences == null) {
      frequentSequences = new ArrayList<Sequence>();
    }
    frequentSequences.add(seq);
  }
  
  public Iterable<String> called() {
    if (calledFunctions == null) {
      return Collections.emptyList();
    }
    return calledFunctions;
  }
  
  public void addcalledFunction(String calledFunctionName) {
    if (calledFunctions == null) {
      calledFunctions = new ArrayList<String>();
    }
    calledFunctions.add(calledFunctionName);
  }
  
  public Iterable<AsmParser.Instruction> instructions() {
    if (instructions == null) {
      return Collections.emptyList();
    }
    return instructions;
  }
  
  public List<AsmParser.Instruction> getInstructions() {
    return instructions;
  }
  
  public void addInstruction(AsmParser.Instruction inst) {
    if (instructions == null) {
      instructions = new ArrayList<AsmParser.Instruction>();
    }
    instructions.add(inst);
  }
  
  public Iterable<HashTreeItemset> transactions() {
    if (transactions == null) {
      return Collections.emptyList();
    }
    return transactions;
  }
  
  public void addtransaction(HashTreeItemset transaction) {
    if (transactions == null) {
      transactions = new ArrayList<HashTreeItemset>();
    }
    transactions.add(transaction);
  }
  
  public int instructionSize() {
    if (instructions == null) {
      instructions = new ArrayList<AsmParser.Instruction>();
    }
    return instructions.size();
  }

  public int transactionSize() {
    if (transactions == null) {
      transactions = new ArrayList<HashTreeItemset>();
    }
    return transactions.size();
  }

  public boolean isEmpty() {
    if (instructions == null && transactions == null) {
      return true;
    }
    if ((instructions == null || instructions.isEmpty()) &&
        (transactions == null || transactions.isEmpty())) {
      return true;
    }
    return false;
  }
}
