package malware.feature;

import java.util.List;
import java.util.Random;

import malware.parse.AsmParser;
import malware.parse.Function;
import malware.parse.AsmParser.AsmMode;
import ml.lsh.CosineHash;
import util.hash.HashFunction;

public class CosineLSHLongFeatureExtractor
    implements
      FeatureExtractor<long[], List<AsmParser.Instruction>> {

  HashedNgramFrequencyFeatureExtractor freqVectorExtractor;
  CosineHash lshCosine;

  /***
   * 
   * @param numHyperPlanes the number of random hyper plans. determins the number of bits in
   *        signature.
   * @param rng randome number generator.
   * @param numHashBits number of bits used for dimensionality reduction of the ngram frequecy
   *        vector using hashing trick.
   * @param ngramLength the instruction ngram length.
   * @param asmMode Assembly Mode (opcode|asm)
   * @param hashFn the hash function to be used for dimensionality reduction of the ngram frequecy
   *        vector.
   */
  public CosineLSHLongFeatureExtractor(int numHyperPlanes, Random rng, int numHashBits,
      int ngramLength, AsmMode asmMode, HashFunction hashFn) {
    freqVectorExtractor =
        new HashedNgramFrequencyFeatureExtractor(numHashBits, ngramLength, false, asmMode, hashFn);
    int dimension = 1 << numHashBits;
    lshCosine = new CosineHash(dimension, numHyperPlanes, rng);
  }

  @Override
  public long[] extractFeatures(List<AsmParser.Instruction> instructionList) {
    Double[] ngramFreqVec = freqVectorExtractor.extractFeatures(instructionList);
    long[] sig = lshCosine.signatureLong(ngramFreqVec);
    return sig;
  }

}
