package malware.feature;

import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;

import malware.parse.AsmParser;
import malware.parse.Function;
import malware.parse.AsmParser.AsmMode;
import malware.parse.AsmParser.Instruction;
import util.CommandLineArguments;

public class NGramFreqFeatureExtractor
    implements
      FeatureExtractor<Double[], List<AsmParser.Instruction>> {
  int ngramLength;
  boolean normalized;
  Map<String, Integer> uniqueNgramMap;
  AsmMode asmMode;

  /***
   * Creates an Ngram Frequecy feature extractor.
   * 
   * @param ngramLength
   * @param normalized
   * @param ngramSet A map containing all the unique ngrams observed in the input files. Can use the
   *        static NGramFreqFeatureExtractor.ngramSet method read it from csv file. This Map maps
   *        from ngram to index in the feature vector.
   */
  public NGramFreqFeatureExtractor(int ngramLength, boolean normalized,
      Map<String, Integer> uniqueNgramMap, AsmMode asmMode) {
    this.ngramLength = ngramLength;
    this.normalized = normalized;
    this.uniqueNgramMap = uniqueNgramMap;
    this.asmMode = asmMode;
  }

  @Override
  public Double[] extractFeatures(List<AsmParser.Instruction> instructionList) {
    Double[] rawFreq = new Double[uniqueNgramMap.size()];
    for (int i = 0; i < rawFreq.length; i++) {
      rawFreq[i] = 0.0;
    }

    double sum = 0;
    Queue<Instruction> slidingWindow = new LinkedList<Instruction>();
    for (Instruction inst : instructionList) {
      String key = null;
      if (ngramLength == 1) {
        if (asmMode == AsmMode.ASM) {
          key = inst.getAsm();
        } else {
          key = inst.getOpcode();
        }
      } else {
        slidingWindow.add(inst);

        if (slidingWindow.size() > ngramLength) {
          slidingWindow.poll();
        }

        if (slidingWindow.size() == ngramLength) {
          key = toNgramString(slidingWindow, asmMode);
        }
      }

      if (key == null) {
        continue;
      }
      Integer index = uniqueNgramMap.get(key);
      if (index == null) {
        continue;
      }
      rawFreq[index]++;
      sum++;
    }

    if (normalized) {
      for (int i = 0; i < rawFreq.length; i++) {
        rawFreq[i] = sum == 0.0 ? 0.0 : rawFreq[i] / sum;
      }
    }

    return rawFreq;
  }

  /***
   * Extracts all the unique ngrams from the input list of disassembled files. This method can be
   * used to provide the input for this class constructor.
   * 
   * @param ngramLength the length of the ngram. (1 = unigram, 2 = bigram ...).
   * @param disassembledFiles List of file objects pointing to the diassembled files.
   * @param noDBInstructions DB,DW,DD,DQ,DT instrcutions will not be included.
   * @return A set containing all the unique ngrams observed in the input files.
   * @throws FileNotFoundException
   */
  public static Map<String, Integer> ngramSet(int ngramLength, File[] disassembledFiles,
      AsmMode asmMode, boolean includeDBInstructions) throws FileNotFoundException {
    // Maps ngram to index.
    Map<String, Integer> uniqueNgramMap = new HashMap<String, Integer>(50);

    int index = 0;
    for (int i = 0; i < disassembledFiles.length; i++) {
      if (i % 200 == 0) {
        System.err.printf("NgramSet Processed %d of %d\n", i, disassembledFiles.length);
      }

      File f = disassembledFiles[i];
      BufferedInputStream stream = new BufferedInputStream(new FileInputStream(f));
      // System.err.println(f.getName());
      List<Instruction> instructions = AsmParser.parseIntructionList(stream, includeDBInstructions);
      Queue<Instruction> slidingWindow = new LinkedList<Instruction>();

      for (Instruction inst : instructions) {
        String key = null;
        if (ngramLength == 1) {
          if (asmMode == AsmMode.ASM) {
            key = inst.getAsm();
          } else {
            key = inst.getOpcode();
          }
        } else {
          slidingWindow.add(inst);

          if (slidingWindow.size() > ngramLength) {
            slidingWindow.poll();
          }

          if (slidingWindow.size() == ngramLength) {
            key = toNgramString(slidingWindow, asmMode);
          }
        }

        if (key == null) {
          continue;
        }
        if (!uniqueNgramMap.containsKey(key)) {
          uniqueNgramMap.put(key, index++);
        }
      }
    }

    return uniqueNgramMap;
  }

  private static String toNgramString(Queue<Instruction> slidingWindow, AsmMode asmMode) {
    StringBuilder sb = new StringBuilder();
    for (Instruction i : slidingWindow) {
      if (asmMode == AsmMode.ASM) {
        sb.append(i.getAsm());
      } else {
        sb.append(i.getOpcode());
      }
      sb.append("-");
    }
    return sb.toString();
  }

  public static void main(String[] args) throws IOException {
    CommandLineArguments cmdArgs = new CommandLineArguments();
    cmdArgs.addOption(true, "-in", true); // Input folder path .asm files
    cmdArgs.addOption(true, "-out", true); // Output file path for result file.
    cmdArgs.addOption(true, "-mode", true); // opcode | asm
    cmdArgs.addOption(true, "-ngram_len", true); // ngram length.
    cmdArgs.addOption(false, "-no_db", false); // Do not include DB(declare byte) instructions.

    if (!cmdArgs.parseCommandLineArgs(args)) {
      System.out.println("Usage:\n\tjava NGramFreqFeatureExtractor "
          + " -in input_file -out output_file -mode (opcode|asm) " + " -ngram_len ngram_length\n");
      return;
    }

    String inputPath = cmdArgs.getOptionValue("-in");
    String outputPath = cmdArgs.getOptionValue("-out");
    AsmMode asmMode = cmdArgs.getOptionValue("-mode").equals("asm") ? AsmMode.ASM : AsmMode.OPCODE;
    int ngramLength = Integer.parseInt(cmdArgs.getOptionValue("-ngram_len"));
    boolean includeDBInstructions = !cmdArgs.isOptionFound("-no_db");

    File[] files = util.FileUtil.listFiles(".asm", new File(inputPath));
    Map<String, Integer> uniqueNgramMap =
        ngramSet(ngramLength, files, asmMode, includeDBInstructions);

    PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(new File(outputPath))));
    for (Map.Entry<String, Integer> pair : uniqueNgramMap.entrySet()) {
      writer.printf("%s,%d\n", pair.getKey(), pair.getValue());
    }
    writer.flush();
    writer.close();
  }
}
