package malware.feature;

import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Random;

import malware.parse.AsmParser;
import malware.parse.Function;
import malware.parse.AsmParser.AsmMode;
import malware.parse.AsmParser.Instruction;
import ml.lsh.MinHash;

public class MinHashFeatureExtractor
    implements
      FeatureExtractor<long[], List<AsmParser.Instruction>> {

  private AsmMode asmMode;
  private MinHash minHash;
  private int ngramLen;

  public MinHashFeatureExtractor(AsmMode asmMode, int numHashFunctions, Random rng,
      int hashBitLen) {
    this(asmMode, numHashFunctions, rng, hashBitLen, 1);
  }

  public MinHashFeatureExtractor(AsmMode asmMode, int numHashFunctions, Random rng, int hashBitLen,
      int ngramLen) {
    this.asmMode = asmMode;
    minHash = new MinHash(numHashFunctions, rng, hashBitLen);
    this.ngramLen = ngramLen;
  }

  @Override
  public long[] extractFeatures(List<AsmParser.Instruction> instructionList) {
    List<String> tokens = new LinkedList<String>();
    if (ngramLen == 1) {
      for (Instruction i : instructionList) {
        if (asmMode == AsmMode.OPCODE) {
          tokens.add(i.getOpcode());
        } else {
          tokens.add(i.getAsm());
        }
      }
    } else {
      Queue<String> q = new LinkedList<String>();
      for (Instruction i : instructionList) {
        if (asmMode == AsmMode.OPCODE) {
          q.add(i.getOpcode());
        } else {
          q.add(i.getAsm());
        }

        if (q.size() > ngramLen) {
          q.poll();
        }
        if (q.size() == ngramLen) {
          StringBuilder buff = new StringBuilder();
          for (String item : q) {
            buff.append(item);
          }
          tokens.add(buff.toString());
        }
      }
      // if (q.size() < ngramLen) {
      // StringBuilder buff = new StringBuilder();
      // for (String item : q) {
      // buff.append(item);
      // }
      // tokens.add(buff.toString());
      // }
    }
    return minHash.signature(tokens);
  }

}
