package malware.feature;

import static org.junit.Assert.assertEquals;

import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import malware.parse.AsmParser.AsmMode;
import malware.parse.AsmParser.Instruction;
import malware.parse.Function;
import util.hash.MockHashFunction;

public class HashedNgramFrequencyFeatureExtractorTest {
  Function func;
  MockHashFunction mockHashFn;
  int ngramLength;
  int numHashBits;
  Double[] expectedOpcodeFreq;
  Double[] expectedAsmFreq;
  Double[] expectedOpcodeNormalized;
  Double[] expectedAsmNormalized;
  
  @Before
  public void setUp() throws Exception {
    func = new Function();
    func.addInstruction(new Instruction("a", "a"));
    func.addInstruction(new Instruction("b", "b"));
    func.addInstruction(new Instruction("c", "c"));
    func.addInstruction(new Instruction("d", "d"));
    func.addInstruction(new Instruction("a", "a"));
    func.addInstruction(new Instruction("b", "b"));
    func.addInstruction(new Instruction("d", "a"));
    func.addInstruction(new Instruction("a", "b"));
    func.addInstruction(new Instruction("b", "c"));
    
    
    mockHashFn = new MockHashFunction();
    mockHashFn.addMapping("a,b,", 0);
    mockHashFn.addMapping("b,c,", 1);
    mockHashFn.addMapping("c,d,", 2);
    mockHashFn.addMapping("d,a,", 3);
    mockHashFn.addMapping("b,d,", 4);
    mockHashFn.addMapping("b,a,", 5);
    
    ngramLength = 2;
    numHashBits = 3;
    
    expectedOpcodeFreq = new Double[8];
    expectedOpcodeFreq[0] = 3 / 8.0;
    expectedOpcodeFreq[1] = 2 / 8.0;
    expectedOpcodeFreq[2] = 1 / 8.0;
    expectedOpcodeFreq[3] = 1 / 8.0;
    expectedOpcodeFreq[4] = 0 / 8.0;
    expectedOpcodeFreq[5] = 1 / 8.0;
    expectedOpcodeFreq[6] = 0 / 8.0;
    expectedOpcodeFreq[7] = 0 / 8.0;
    
    expectedAsmFreq = new Double[8];
    expectedAsmFreq[0] = 3 / 8.0;
    expectedAsmFreq[1] = 1 / 8.0;
    expectedAsmFreq[2] = 1 / 8.0;
    expectedAsmFreq[3] = 2 / 8.0;
    expectedAsmFreq[4] = 1 / 8.0;
    expectedAsmFreq[5] = 0 / 8.0;
    expectedAsmFreq[6] = 0 / 8.0;
    expectedAsmFreq[7] = 0 / 8.0;
    
    double magOpcode = Math.sqrt((9+4+1+1+1) / 64.0);
    double magAsm = Math.sqrt((9+1+1+4+1) / 64.0);
    
    expectedOpcodeNormalized = new Double[8];
    for (int i = 0; i < expectedOpcodeNormalized.length; i++) {
      expectedOpcodeNormalized[i] = expectedOpcodeFreq[i] / magOpcode;
    }
    
    expectedAsmNormalized = new Double[8];
    for (int i = 0; i < expectedAsmNormalized.length; i++) {
      expectedAsmNormalized[i] = expectedAsmFreq[i] / magAsm;
    }
  }

  @After
  public void tearDown() throws Exception {}

  @Test
  public void testExtractFeaturesOpcodeNoNormalization() {
    AsmMode asmMode = AsmMode.OPCODE;
    boolean normalize = false;
    
    FeatureExtractor<Double[], List<Instruction>> extractor = new HashedNgramFrequencyFeatureExtractor(numHashBits, 
        ngramLength, normalize, asmMode, mockHashFn);
    
    Double[] featureV = extractor.extractFeatures(func.getInstructions());
    
    int expectedSize = 8;
    assertEquals(expectedSize, featureV.length);
    
    for (int i = 0; i < expectedSize; i++) {
      assertEquals(
          String.format("i=%d,expected=%.5f,actual=%.5f", i, expectedOpcodeFreq[i], featureV[i]),
          expectedOpcodeFreq[i], featureV[i]);
    }
  }
  
  @Test
  public void testExtractFeaturesOpcodeWithNormalization() {
    AsmMode asmMode = AsmMode.OPCODE;
    boolean normalize = true;
    
    FeatureExtractor<Double[], List<Instruction>> extractor = new HashedNgramFrequencyFeatureExtractor(numHashBits, 
        ngramLength, normalize, asmMode, mockHashFn);
    
    Double[] featureV = extractor.extractFeatures(func.getInstructions());
    
    int expectedSize = 8;
    assertEquals(expectedSize, featureV.length);
    
    for (int i = 0; i < expectedSize; i++) {
      assertEquals(
          String.format("i=%d,expected=%.5f,actual=%.5f", i, expectedOpcodeNormalized[i], 
              featureV[i]),
          expectedOpcodeNormalized[i], featureV[i]);
    }
  }
  
  @Test
  public void testExtractFeaturesAsmNoNormalization() {
    AsmMode asmMode = AsmMode.ASM;
    boolean normalize = false;
    
    FeatureExtractor<Double[], List<Instruction>> extractor = new HashedNgramFrequencyFeatureExtractor(numHashBits, 
        ngramLength, normalize, asmMode, mockHashFn);
    
    Double[] featureV = extractor.extractFeatures(func.getInstructions());
    
    int expectedSize = 8;
    assertEquals(expectedSize, featureV.length);
    
    for (int i = 0; i < expectedSize; i++) {
      assertEquals(
          String.format("i=%d,expected=%.5f,actual=%.5f", i, expectedAsmFreq[i], featureV[i]),
          expectedAsmFreq[i], featureV[i]);
    }
  }
  
  @Test
  public void testExtractFeaturesAsmWithNormalization() {
    AsmMode asmMode = AsmMode.ASM;
    boolean normalize = true;
    
    FeatureExtractor<Double[], List<Instruction>> extractor = new HashedNgramFrequencyFeatureExtractor(numHashBits, 
        ngramLength, normalize, asmMode, mockHashFn);
    
    Double[] featureV = extractor.extractFeatures(func.getInstructions());
    
    int expectedSize = 8;
    assertEquals(expectedSize, featureV.length);
    
    for (int i = 0; i < expectedSize; i++) {
      assertEquals(
          String.format("i=%d,expected=%.5f,actual=%.5f", i, expectedAsmNormalized[i], 
              featureV[i]),
          expectedAsmNormalized[i], featureV[i]);
    }
  }

}
