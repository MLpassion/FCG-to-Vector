package malware.feature;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import malware.feature.FrequencyJaccardFunctionMatcher;

public class FrequencyJaccardFunctionMatcherTest {

  @Before
  public void setUp() throws Exception {}

  @After
  public void tearDown() throws Exception {}

  @Test
  public void testMatching() {
    Double[] f1 = new Double[3];
    f1[0] = 3.0;
    f1[1] = 3.0;
    f1[2] = 4.0;
    
    Double[] f2 = new Double[3];
    f2[0] = 3.0;
    f2[1] = 3.0;
    f2[2] = 4.0;
    
    FrequencyJaccardFunctionMatcher matcher = new FrequencyJaccardFunctionMatcher();
    assertTrue(matcher.matching(f1, f2, 1.0F));
    
    
    f2[0] = 1.0;
    assertFalse(matcher.matching(f1, f2, 1.0F));
    assertTrue(matcher.matching(f1, f2, 0.75F));
  }

  @Test
  public void testSimilarityEqual() {
    Double[] f1 = new Double[4];
    f1[0] = 3.0;
    f1[1] = 3.0;
    f1[2] = 1.0;
    f1[3] = 2.0;
    
    Double[] f2 = new Double[4];
    f2[0] = 3.0;
    f2[1] = 3.0;
    f2[2] = 1.0;
    f2[3] = 2.0;
    
    FrequencyJaccardFunctionMatcher matcher = new FrequencyJaccardFunctionMatcher();
    double actual = matcher.similarity(f1, f2);
    double expected = 1.0;
    assertEquals(expected, actual, 0.0001);
  }
  
  @Test
  public void testSimilarityLarge() {
    Double[] f1 = new Double[4];
    f1[0] = 1.0;
    f1[1] = 3.0;
    f1[2] = 1.0;
    f1[3] = 2.0;
    
    Double[] f2 = new Double[4];
    f2[0] = 3.0;
    f2[1] = 3.0;
    f2[2] = 1.0;
    f2[3] = 2.0;
    
    FrequencyJaccardFunctionMatcher matcher = new FrequencyJaccardFunctionMatcher();
    double actual = matcher.similarity(f1, f2);
    double expected = 7.0 / 9.0;
    assertEquals(expected, actual, 0.0001);
  }

}
