package malware.feature;

import static org.junit.Assert.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import malware.feature.NGramFreqFeatureExtractor;
import malware.parse.Function;
import malware.parse.AsmParser.AsmMode;
import malware.parse.AsmParser.Instruction;

public class NGramFreqFeatureExtractorTest {
  Function func;
  Double[] expectedUnigramOpcodeFreq;
  Double[] expectedUnigramAsmFreq;
  Double[] expectedUnigramOpcodeNormalized;
  Double[] expectedUnigramAsmNormalized;

  Map<String, Integer> uniqueUnigramMap;

  @Before
  public void setUp() throws Exception {
    func = new Function();
    func.addInstruction(new Instruction("a", "a"));
    func.addInstruction(new Instruction("b", "b"));
    func.addInstruction(new Instruction("c", "c"));
    func.addInstruction(new Instruction("d", "d"));
    func.addInstruction(new Instruction("a", "a"));
    func.addInstruction(new Instruction("b", "b"));
    func.addInstruction(new Instruction("d", "a"));
    func.addInstruction(new Instruction("a", "b"));
    func.addInstruction(new Instruction("b", "c"));

    uniqueUnigramMap = new HashMap<String, Integer>();
    uniqueUnigramMap.put("a", 0);
    uniqueUnigramMap.put("b", 1);
    uniqueUnigramMap.put("c", 2);
    uniqueUnigramMap.put("d", 3);

    expectedUnigramAsmFreq = new Double[uniqueUnigramMap.size()];
    expectedUnigramAsmFreq[0] = 3.0;
    expectedUnigramAsmFreq[1] = 3.0;
    expectedUnigramAsmFreq[2] = 1.0;
    expectedUnigramAsmFreq[3] = 2.0;

    expectedUnigramAsmNormalized = new Double[expectedUnigramAsmFreq.length];
    double unigramFreqSum = 0.0;
    for (int i = 0; i < expectedUnigramAsmFreq.length; i++) {
      unigramFreqSum += expectedUnigramAsmFreq[i];
    }
    for (int i = 0; i < expectedUnigramAsmNormalized.length; i++) {
      expectedUnigramAsmNormalized[i] = expectedUnigramAsmFreq[i] / unigramFreqSum;
    }
  }

  @Test
  public void testExtractFeaturesUnigram() {
    int ngramLength = 1;
    boolean normalized = false;
    AsmMode asmMode = AsmMode.ASM;

    NGramFreqFeatureExtractor extractor =
        new NGramFreqFeatureExtractor(ngramLength, normalized, uniqueUnigramMap, asmMode);
    
    Double[] asmFreq = extractor.extractFeatures(func.getInstructions());
    
    assertArrayEquals(expectedUnigramAsmFreq, asmFreq);
  }

  @Test
  public void testExtractFeaturesUnigramNormalized() {
    int ngramLength = 1;
    boolean normalized = true;
    AsmMode asmMode = AsmMode.ASM;

    NGramFreqFeatureExtractor extractor =
        new NGramFreqFeatureExtractor(ngramLength, normalized, uniqueUnigramMap, asmMode);
    
    Double[] asmFreq = extractor.extractFeatures(func.getInstructions());
    
    assertArrayEquals(expectedUnigramAsmNormalized, asmFreq);
  }

}
