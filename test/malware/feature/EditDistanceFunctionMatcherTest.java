package malware.feature;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import malware.feature.EditDistanceFunctionMatcher;
import malware.parse.AsmParser.AsmMode;
import malware.parse.AsmParser.Instruction;
import malware.parse.CallGraph.FunctionVertex;
import malware.parse.CallGraph.FunctionVertex.FunctionType;

public class EditDistanceFunctionMatcherTest {
  FunctionVertex<List<Instruction>> f1;
  FunctionVertex<List<Instruction>> f2;
  FunctionVertex<List<Instruction>> f3;
  
  @Before
  public void setUp() throws Exception {
 // kitten â†’ sitten 
    List<Instruction> inst1 = new ArrayList<Instruction>();
    inst1.add(new Instruction("k", "k"));
    inst1.add(new Instruction("i", "i"));
    inst1.add(new Instruction("t", "t"));
    inst1.add(new Instruction("t", "t"));
    inst1.add(new Instruction("e", "e"));
    inst1.add(new Instruction("n", "n"));
    
    List<Instruction> inst2 = new ArrayList<Instruction>();
    inst2.add(new Instruction("s", "s"));
    inst2.add(new Instruction("i", "i"));
    inst2.add(new Instruction("t", "t"));
    inst2.add(new Instruction("t", "t"));
    inst2.add(new Instruction("i", "i"));
    inst2.add(new Instruction("n", "n"));
    inst2.add(new Instruction("g", "g"));
    
    List<Instruction> inst3 = new ArrayList<Instruction>();
    inst3.add(new Instruction("k", "k"));
    
    f1 = new FunctionVertex<List<Instruction>>("f1", inst1,
        FunctionType.Internal);
    f2 = new FunctionVertex<List<Instruction>>("f2", inst2,
        FunctionType.Internal);
    f3 = new FunctionVertex<List<Instruction>>("f3", inst3,
        FunctionType.Internal);
    
  }

  @After
  public void tearDown() throws Exception {}

  @Test
  public void testSimilarityOpcodeOneInst() {
    EditDistanceFunctionMatcher matcher = new EditDistanceFunctionMatcher(AsmMode.OPCODE);
    
    double editDist = matcher.similarity(f1.getFeatures(), f3.getFeatures());
    
    assertEquals(1.0 - (5 / 6.0), editDist, 0.001);
  }
  
  @Test
  public void testMatchingAsm() {
    EditDistanceFunctionMatcher matcher = new EditDistanceFunctionMatcher(AsmMode.ASM);
    
    assertTrue(matcher.matching(f1.getFeatures(), f2.getFeatures(), (float)4 / 7));
    assertFalse(matcher.matching(f1.getFeatures(), f2.getFeatures(), (float)2 / 7));
  }

  @Test
  public void testSimilarityAsm() {
    EditDistanceFunctionMatcher matcher = new EditDistanceFunctionMatcher(AsmMode.ASM);
    
    double editDist = matcher.similarity(f1.getFeatures(), f2.getFeatures());
    
    assertEquals(1.0 - (3 / 7.0), editDist, 0.001);
  }
  
  @Test
  public void testMatchingOpcode() {
    EditDistanceFunctionMatcher matcher = new EditDistanceFunctionMatcher(AsmMode.OPCODE);
    
    assertTrue(matcher.matching(f1.getFeatures(), f2.getFeatures(), (float)4 / 7));
    assertFalse(matcher.matching(f1.getFeatures(), f2.getFeatures(), (float)2 / 7));
  }

  @Test
  public void testSimilarityOpcode() {
    EditDistanceFunctionMatcher matcher = new EditDistanceFunctionMatcher(AsmMode.OPCODE);
    
    double editDist = matcher.similarity(f1.getFeatures(), f2.getFeatures());
    
    assertEquals(1.0 - (3 / 7.0), editDist, 0.001);
  }

}
