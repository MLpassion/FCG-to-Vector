package malware.parse;

import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Scanner;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import malware.parse.AsmParser;
import malware.parse.Function;
import malware.parse.AsmParser.AsmMode;
import malware.parse.AsmParser.ExtractionMode;
import malware.parse.AsmParser.Instruction;

public class AsmParserTest {
  String fileLines;

  @Before
  public void setUp() throws Exception {
    StringBuilder sb = new StringBuilder();
    File f = new File("test_data/function_extraction.asm");
    Scanner in = new Scanner(f);
    while (in.hasNextLine()) {
      sb.append(in.nextLine());
      sb.append("\n");
    }
    fileLines = sb.toString();
  }

  @After
  public void tearDown() throws Exception {}

  @Test
  public void testParseFunctionTransaction() {
    InputStream stream = new ByteArrayInputStream(fileLines.getBytes(StandardCharsets.UTF_8));
    List<Function> functions = AsmParser.parseFunctionTransaction(stream, 
        ExtractionMode.TRANSACTION, AsmMode.ASM, false);
//    for (Function f : functions) {
//      System.out.println(f.getName());
//      System.out.println("Transactions");
//      for (Itemset it : f.transactions()) {
//        System.out.print("\t");
//        System.out.println(it.toString());
//      }
//    }
    assertEquals(8, functions.size());
  }
  
  @Test
  public void testParseFunctionTransactionCalls() {
    InputStream stream = new ByteArrayInputStream(fileLines.getBytes(StandardCharsets.UTF_8));
    List<Function> functions = AsmParser.parseFunctionTransaction(stream, 
        ExtractionMode.TRANSACTION, AsmMode.ASM, false);
    
    assertEquals(8, functions.size());
    
    int[] numCallsInFunction = {3, 0, 1, 3, 1, 1, 0, 1}; 
    String[] fName = {"std::exception::exception", "sub_402C51", "delete", "delete", "new",
        "std::exception::exception", "_CxxThrowException", "std::exception::exception",
        "_memmove_s", "sub_43E7DB"};
    
    for (int i = 0, j = 0; i < numCallsInFunction.length; i++) {
      Function f = functions.get(i);
      int count = 0;
      for (String called : f.called()) {
//        System.out.print("\t");
//        System.out.println(called);
        assertEquals(fName[j], called);
        count++;
        j++;
      }
      assertEquals(numCallsInFunction[i], count);
    }
    
  }
  
  @Test
  public void testParseFunctionTransactionFunctionAlias() {
    InputStream stream = new ByteArrayInputStream(fileLines.getBytes(StandardCharsets.UTF_8));
    List<Function> functions = AsmParser.parseFunctionTransaction(stream, 
        ExtractionMode.TRANSACTION, AsmMode.ASM, false);
    
    int numFunctions = 8;
    assertEquals(numFunctions, functions.size());
    
    String[] sub_401390Alias = {"loc_4013E4", "loc_4013E6", "loc_4013F2"};
    String[] sub_401530Alias = {"loc_40153D", "loc_40154A"};
    String[] sub_401650Alias = {"loc_401667"};
    
    for (int i = 0, j = 0; i < numFunctions; i++) {
      Function f = functions.get(i);
      if (f.getName().equals("sub_401390")) {
        for (String a : sub_401390Alias) {
          assertEquals(true, f.knownByName(a));
        }
      } else if (f.getName().equals("sub_401530")) {
        for (String a : sub_401530Alias) {
          assertEquals(true, f.knownByName(a));
        }
      } else if (f.getName().equals("sub_401650")) {
        for (String a : sub_401650Alias) {
          assertEquals(true, f.knownByName(a));
        }
      } 
    }
    
  }
  
  @Test
  public void testParseAsmLine() {
    String line1 = ".text:00401600 8B 44 24 10                             mov     eax, [esp+10h]";
    String line2 = ".text:00401611 50                                  push    eax";
    String line3 = ".text:004015A0           sub_4015A0     proc near   ; CODE XREF: sub_43E7D6j";
    String line4 = ".text:0040153E E8 74 1A 00 00     call    ??2@YAPAXI@Z    ; operator new(uint)";
    String line5 = ".text:004035F6 0F 95 C1                                           setnz   cl";
    String line7 = ".text:00401019 90    nop";
    String line8 = ".text:00468B9C 12                                      db  12h";
    
    boolean includeDBInstructions = true;
    Instruction inst1 = AsmParser.parseAsmLine(line1, includeDBInstructions);
    assertEquals("mov", inst1.getAsm());
    assertEquals("8B", inst1.getOpcode());
    
    Instruction inst2 = AsmParser.parseAsmLine(line2, includeDBInstructions);
    assertEquals("push", inst2.getAsm());
    assertEquals("50", inst2.getOpcode());
    
    Instruction inst3 = AsmParser.parseAsmLine(line3, includeDBInstructions);
    assertEquals(null, inst3);
    
    Instruction inst4 = AsmParser.parseAsmLine(line4, includeDBInstructions);
    assertEquals("call", inst4.getAsm());
    assertEquals("E8", inst4.getOpcode());
    
    // two byte opcodes
    Instruction inst5 = AsmParser.parseAsmLine(line5, includeDBInstructions);
    assertEquals("setnz", inst5.getAsm());
    assertEquals("0F 95", inst5.getOpcode());
    
    Instruction inst7 = AsmParser.parseAsmLine(line7, includeDBInstructions);
    assertEquals("nop", inst7.getAsm());
    assertEquals("90", inst7.getOpcode());
    
    Instruction inst8 = AsmParser.parseAsmLine(line8, includeDBInstructions);
    assertEquals("db", inst8.getAsm());
    assertEquals("12", inst8.getOpcode());
  }
  
  @Test
  public void testParseAsmLineNoDBInstructions() {
    String line1 = ".text:00401600 8B 44 24 10                             mov     eax, [esp+10h]";
    String line2 = ".text:00401611 50                                  push    eax";
    String line3 = ".text:004015A0           sub_4015A0     proc near   ; CODE XREF: sub_43E7D6j";
    String line4 = ".text:0040153E E8 74 1A 00 00     call    ??2@YAPAXI@Z    ; operator new(uint)";
    String line5 = ".text:004035F6 0F 95 C1                                           setnz   cl";
    String line6 = ".text:0040653F 8B FF                             ___onexitinit   db 8Bh, 0FFh";
    String line7 = ".text:00401019 90    nop";
    String line8 = ".text:00468C58 72 73 72 33 72 00                 aRsr3r          db 'rsr3r',0";
    String line9 = ".text:00468B9C 12                                      db  12h";
    
    boolean includeDBInstructions = false;
    Instruction inst1 = AsmParser.parseAsmLine(line1, includeDBInstructions);
    assertEquals("mov", inst1.getAsm());
    assertEquals("8B", inst1.getOpcode());
    
    Instruction inst2 = AsmParser.parseAsmLine(line2, includeDBInstructions);
    assertEquals("push", inst2.getAsm());
    assertEquals("50", inst2.getOpcode());
    
    Instruction inst3 = AsmParser.parseAsmLine(line3, includeDBInstructions);
    assertEquals(null, inst3);
    
    Instruction inst4 = AsmParser.parseAsmLine(line4, includeDBInstructions);
    assertEquals("call", inst4.getAsm());
    assertEquals("E8", inst4.getOpcode());
    
    // two byte opcodes
    Instruction inst5 = AsmParser.parseAsmLine(line5, includeDBInstructions);
    assertEquals("setnz", inst5.getAsm());
    assertEquals("0F 95", inst5.getOpcode());
    
    Instruction inst6 = AsmParser.parseAsmLine(line6, includeDBInstructions);
    assertNull(inst6);
    
    Instruction inst7 = AsmParser.parseAsmLine(line7, includeDBInstructions);
    assertEquals("nop", inst7.getAsm());
    assertEquals("90", inst7.getOpcode());
    
    Instruction inst8 = AsmParser.parseAsmLine(line8, includeDBInstructions);
    assertNull(inst8);
    
    Instruction inst9 = AsmParser.parseAsmLine(line9, includeDBInstructions);
    assertNull(inst9);
  }

  @Test
  public void testParseFunctionName() {
    String call1PtrFuncName = "near ptr  VersionOfUpdateOrPlatform+1";
    assertEquals("VersionOfUpdateOrPlatform", AsmParser.parseFunctionName(call1PtrFuncName));
    
    String call1PtrReg = "dword ptr [ebp+8]";
    assertEquals(null, AsmParser.parseFunctionName(call1PtrReg));
    
    String call1Sub = "sub_4587A3DE";
    assertEquals("sub_4587A3DE", AsmParser.parseFunctionName(call1Sub));
    
    String call1Segment = "ds:GetCurrentThreadId";
    assertEquals("GetCurrentThreadId", AsmParser.parseFunctionName(call1Segment));
    
    String call1Reg = "eax";
    assertEquals(null, AsmParser.parseFunctionName(call1Reg));
    
    String call1Reg2 = "[eax+1]";
    assertEquals(null, AsmParser.parseFunctionName(call1Reg2));
    
    String call1Comment1 = 
        "??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)";
    assertEquals("std::exception::exception", AsmParser.parseFunctionName(call1Comment1));

    String call1Comment2 = "esi ; GetProcAddress";
    assertEquals("GetProcAddress", AsmParser.parseFunctionName(call1Comment2));
    
    String call1FuncName = "_memcpy_s";
    assertEquals("_memcpy_s", AsmParser.parseFunctionName(call1FuncName));
    
    String callComment3 = "    ??2@YAPAXI@Z    ; operator new(uint)";
    assertEquals("new", AsmParser.parseFunctionName(callComment3));
  }
}
