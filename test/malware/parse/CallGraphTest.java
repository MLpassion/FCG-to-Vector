package malware.parse;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import malware.feature.FeatureExtractor;
import malware.parse.AsmParser.Instruction;

public class CallGraphTest {

  @Before
  public void setUp() throws Exception {}

  @After
  public void tearDown() throws Exception {}

  @Test
  public void testBuild() {
    List<Function> functions = new ArrayList<Function>();
    Function f1 = new Function("F1");
    functions.add(f1);
    f1.addNameAlias("aliasF1");
    f1.addcalledFunction("external1"); // E: 0,4

    Function f2 = new Function("F2");
    functions.add(f2);
    f2.addcalledFunction(f1.getName()); // E: 1,0

    Function f3 = new Function("F3");
    functions.add(f3);
    f3.addcalledFunction("alias" + f1.getName()); // E: 2,0
    f3.addcalledFunction("external2"); // E: 2,5

    Function f4 = new Function("F4");
    functions.add(f4);
    f4.addcalledFunction("external1"); // E: 3,4

    CallGraph<Float> cg =
        CallGraph.build(functions, new FeatureExtractor<Float, List<Instruction>>() {
          // Dummy FeatureExtractor.
          @Override
          public Float extractFeatures(List<Instruction> function) {
            // TODO Auto-generated method stub
            return 0F;
          }
        }, true);

    assertEquals(6, cg.vSize()); // 4 internal + 2 external functions.
    assertEquals(new CallGraph.FunctionCallEdge(0, 4), cg.getEdge(0, 4));
    assertEquals(new CallGraph.FunctionCallEdge(1, 0), cg.getEdge(1, 0));
    assertEquals(new CallGraph.FunctionCallEdge(2, 0), cg.getEdge(2, 0));
    assertEquals(new CallGraph.FunctionCallEdge(2, 5), cg.getEdge(2, 5));
    assertEquals(new CallGraph.FunctionCallEdge(3, 4), cg.getEdge(3, 4));
  }

}
